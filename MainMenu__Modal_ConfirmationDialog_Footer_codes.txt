

// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/MainMenuButton/MainMenuButton.tsx

import React, { useState } from 'react';
import { MainMenuButtonContainer, DropUpMenu } from './styled';
import Icon from '@/components/Icon';
import ConfirmationDialog from '@/components/ConfirmationDialog'; // Import the ConfirmationDialog component

interface MainMenuButtonProps {
  onActionSelect: (action: string) => void;
}

const MainMenuButton: React.FC<MainMenuButtonProps> = ({ onActionSelect }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [selectedAction, setSelectedAction] = useState<string | null>(null);

  const handleMenuToggle = () => {
    setIsOpen((prev) => !prev);
  };

  const handleActionClick = (action: string) => {
    setIsOpen(false);
    setSelectedAction(action);
    setIsDialogOpen(true);
  };

  const handleConfirm = () => {
    if (selectedAction) {
      onActionSelect(selectedAction);
    }
    setIsDialogOpen(false);
  };

  const handleCancel = () => {
    setIsDialogOpen(false);
    setSelectedAction(null);
  };

  return (
    <>
      <MainMenuButtonContainer>
        <Icon
          svg="plusCircle"
          onClick={handleMenuToggle}
          css={{ cursor: 'pointer', width: '24px', height: '24px' }}
        />
        {isOpen && (
          <DropUpMenu>
            <button onClick={() => handleActionClick('exploreTours')}>Explore Tours</button>
            <button onClick={() => handleActionClick('viewBookings')}>View Bookings</button>
            <button onClick={() => handleActionClick('contactSupport')}>Contact Support</button>
          </DropUpMenu>
        )}
      </MainMenuButtonContainer>
      {isDialogOpen && (
        <ConfirmationDialog
          isOpen={isDialogOpen}
          onAccept={handleConfirm}
          onCancel={handleCancel}
          message={`Do you want to explore ${selectedAction}?`}
        />
      )}
    </>
  );
};

export default MainMenuButton;


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/MainMenuButton/index.tsx

export { default } from './MainMenuButton';


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/MainMenuButton/styled.ts

import { styled } from '@/styles'; // Keep using the project-specific styling utility

export const MainMenuButtonContainer = styled('div', {
    position: 'relative',
    display: 'flex',
    alignItems: 'center', // Ensures the MainMenuButton is aligned vertically with other elements
    justifyContent: 'center',
    marginRight: '12px', // Adjust the spacing between the MainMenuButton and the ChatInput container to prevent collision
  });

export const DropUpMenu = styled('div', {
  position: 'absolute',
  bottom: 50,
  left: 0,
  backgroundColor: '$white',
  borderRadius: '$1',
  boxShadow: '0 1px 6px $shadow6',
  padding: '8px 0',
  width: 150,
  zIndex: 2,
  display: 'flex',
  flexDirection: 'column',

  '& button': {
    background: 'none',
    border: 'none',
    padding: '8px 16px',
    textAlign: 'left',
    cursor: 'pointer',
    color: '$black',

    '&:hover': {
      backgroundColor: '$lightGrey',
    },
  },
});


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/Modal/Modal.tsx

import React from 'react';
import { Container, Overlay, Content, Actions } from './styled';

interface ModalProps {
  isOpen: boolean;
  title?: string;
  onClose: () => void;
  onConfirm: () => void;
  children?: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ isOpen, title, onClose, onConfirm, children }) => {
  if (!isOpen) return null;

  return (
    <Overlay onClick={onClose}>
      <Container onClick={(e) => e.stopPropagation()}>
        {title && <h2>{title}</h2>}
        <Content>{children}</Content>
        <Actions>
          <button onClick={onClose}>Cancel</button>
          <button onClick={onConfirm}>Confirm</button>
        </Actions>
      </Container>
    </Overlay>
  );
};

export default Modal;


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/Modal/index.tsx

export { default } from './Modal';


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/Modal/styled.ts

import Button from '@/components/Button';
import { ClassName } from '@/constants';
import { tagFactory } from '@/hocs';
import { styled } from '@/styles';

const tag = tagFactory(ClassName.MODAL);

export const Overlay = styled(tag('div', 'overlay'), {
  position: 'fixed',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  backgroundColor: 'rgba(0, 0, 0, 0.6)', // Semi-transparent background
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  zIndex: 1000, // Ensure it is above other elements
});

export const Container = styled(tag('div', 'container'), {
  padding: '$4 $4 $3 $4',
  borderRadius: '$1',
  backgroundColor: '$white',
  boxShadow: '0 12px 48px 4px $shadow12',
  width: '90%', // Default width for responsiveness
  maxWidth: '500px', // Set a maximum width for the modal

  display: 'flex',
  flexDirection: 'column',
  position: 'relative',
});

export const Content = styled(tag('div', 'content'), {
  paddingBottom: '$3',
  color: '$black',
  flex: 1,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
});

export const Actions = styled(tag('div', 'actions'), {
  display: 'flex',
  justifyContent: 'space-between',
  marginTop: '$3',

  [`& ${Button.Container}`]: {
    flex: 1,
    marginLeft: '$2',

    '&:first-of-type': {
      marginLeft: 0,
    },
  },
});


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/ConfirmationDialog/ConfirmationDialog.tsx

import React from 'react';
import { Overlay, Container, Content, Actions } from './styled';
import Button from '@/components/Button';

interface ConfirmationDialogProps {
  isOpen: boolean;
  onAccept: () => void;
  onCancel: () => void;
  message: string;
}

const ConfirmationDialog: React.FC<ConfirmationDialogProps> = ({ isOpen, onAccept, onCancel, message }) => {
  if (!isOpen) return null;

  return (
    <Overlay>
      <Container>
        <Content>
          <p>{message}</p> {/* Displaying the message to the user */}
        </Content>
        <Actions>
          <Button.Primary onClick={onAccept}>Yes</Button.Primary>
          <Button type="subtle" onClick={onCancel}>No</Button>
        </Actions>
      </Container>
    </Overlay>
  );
};

export default ConfirmationDialog;


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/ConfirmationDialog/index.tsx

export { default } from './ConfirmationDialog';


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/ConfirmationDialog/styled.ts

import { styled } from '@/styles'; // Keep using the project-specific styling utility
import { ClassName } from '@/constants';
import { tagFactory } from '@/hocs';
import Button from '@/components/Button';

const tag = tagFactory(ClassName.MODAL);

export const Overlay = styled(tag('div', 'overlay'), {
  position: 'fixed',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  backgroundColor: 'rgba(0, 0, 0, 0.6)', // Semi-transparent background to cover the rest of the page
  zIndex: 1000,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
});

export const Container = styled(tag('div', 'container'), {
  width: '90%',
  maxWidth: '400px', // Limit the width to a maximum of 400px
  padding: '$4',
  borderRadius: '$1',
  backgroundColor: '$white',
  boxShadow: '0 12px 48px 4px $shadow12',
  zIndex: 1100, // Should be on top of the overlay
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
});

export const Content = styled(tag('div', 'content'), {
  marginBottom: '$3',
  textAlign: 'center',
  color: '$black',
  typo: { size: 16, height: '22px' }, // Adjusted typography for readability
});

export const Actions = styled(tag('div', 'actions'), {
  display: 'flex',
  justifyContent: 'space-between',
  width: '100%',
  marginTop: '$2',

  [`& ${Button.Container}`]: {
    flex: 1,
    margin: '0 $1',

    '&:first-of-type': {
      marginLeft: 0,
    },
    '&:last-of-type': {
      marginRight: 0,
    },
  },
});


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/Footer/Footer.story.tsx

import type { Meta, StoryObj } from '@storybook/react';

import Chat from '@/components/Chat';

import Footer from '.';

type Story = StoryObj<typeof Footer>;

const meta: Meta<typeof Footer> = {
  title: 'Components/Chat/Footer',
  component: Footer,
  argTypes: {
    onStart: { action: 'onStart' },
    onSend: { action: 'send' },
  },
  args: {
    hasEnded: false,
    withWatermark: false,
  },
  render: (args) => (
    <Chat.Container>
      <Footer {...args} />
    </Chat.Container>
  ),
};

export default meta;

export const Running: Story = {};

export const Ended: Story = {
  args: {
    hasEnded: true,
  },
};

export const WithWatermark: Story = {
  args: {
    withWatermark: true,
  },
};


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/Footer/index.tsx

import { useState } from 'react';
import Button from '@/components/Button';
import ChatInput from '@/components/ChatInput';
import MainMenuButton from '@/components/MainMenuButton';
import { Container, Watermark, InteractionWrapper, InputWrapper, StartNewChatWrapper, FullWidthButtonWrapper } from './styled';

export interface FooterProps {
  withWatermark: boolean;
  hasEnded?: boolean;
  disableSend?: boolean;
  audioInterface?: boolean;
  onStart?: (() => Promise<void>) | undefined;
  onSend?: ((message: string) => Promise<void>) | undefined;
  speechRecognition?: any;
}

const Footer: React.FC<FooterProps> = ({
  withWatermark,
  hasEnded,
  disableSend,
  onStart,
  onSend,
  audioInterface,
  speechRecognition,
}) => {
  const [message, setMessage] = useState('');

  const handleSend = async (): Promise<void> => {
    if (!message || disableSend) return;

    setMessage('');
    await onSend?.(message);
  };

  const handleMenuActionSelect = (action: string) => {
    // Use unique identifiers for triggering the workflows
    switch (action) {
      case 'exploreTours':
        triggerWorkflow('WORKFLOW_EXPLORE_TOURS');
        break;
      case 'viewBookings':
        triggerWorkflow('WORKFLOW_VIEW_BOOKINGS');
        break;
      case 'contactSupport':
        triggerWorkflow('WORKFLOW_CONTACT_SUPPORT');
        break;
      default:
        break;
    }
  };

  // Function to trigger workflows in Voiceflow
  const triggerWorkflow = (workflowId: string) => {
    // Send a unique command that Voiceflow will interpret as a workflow trigger
    onSend?.(`/workflow ${workflowId}`);
  };

  return (
    <Container>
      {hasEnded ? (
        <StartNewChatWrapper>
          <FullWidthButtonWrapper>
            <Button onClick={onStart}>Start New Chat</Button>
          </FullWidthButtonWrapper>
          {withWatermark && (
            <Watermark>
              Assistant ⚡️ by
              <a target="_blank" href="https://www.romaix.ai/" rel="noreferrer">
                RomAIx
              </a>
            </Watermark>
          )}
        </StartNewChatWrapper>
      ) : (
        <>
          <InteractionWrapper>
            <MainMenuButton onActionSelect={handleMenuActionSelect} />
            <InputWrapper>
              <ChatInput
                value={message}
                placeholder="Message…"
                autoFocus
                onValueChange={setMessage}
                onSend={handleSend}
                disableSend={disableSend}
                audioInterface={audioInterface}
                speechRecognition={speechRecognition}
              />
            </InputWrapper>
          </InteractionWrapper>
          {withWatermark && (
            <Watermark>
              Assistant ⚡️ by
              <a target="_blank" href="https://www.romaix.ai/" rel="noreferrer">
                RomAIx
              </a>
            </Watermark>
          )}
        </>
      )}
    </Container>
  );
};

export default Footer;


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/Footer/styled.ts

import { styled } from '@/styles';
import { ClassName } from '@/constants';
import { tagFactory } from '@/hocs';
import Button from '@/components/Button';
import Input from '@/components/Input';

// Define the tag for styling
const tag = tagFactory(ClassName.FOOTER);

// Styled Container for Footer
export const Container = styled(tag('footer'), {
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  padding: '$3 $4',
  borderRadius: '$1',

  variants: {
    withShadow: {
      true: {
        boxShadow: '0 12px 48px $shadow16',
      },
    },
  },
});

export const InteractionWrapper = styled('div', {
  display: 'flex',
  alignItems: 'center',
  width: '100%',
  marginBottom: '$2',
});

export const InputWrapper = styled('div', {
  flex: 1,
  display: 'flex',
  flexDirection: 'column',

  [`& ${Input.Container}`]: {
    width: '100%',
  },
});

export const StartNewChatWrapper = styled('div', {
  width: '100%',
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',

  [`& ${Button}`]: {
    width: '100%',
    padding: '10px 0',
  },
});

export const FullWidthButtonWrapper = styled('div', {
  width: '100%',
  display: 'flex',
  justifyContent: 'center',

  '& button': {
    width: '100%', // Ensure the button takes the full width of its wrapper
    padding: '10px 0', // Adjust padding as needed
  },
});

export const Watermark = styled(tag('aside', 'watermark'), {
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  padding: '4px 0',
  typo: { size: 12, height: '17px' },
  color: '$darkGrey',

  '& a': {
    marginLeft: '0.5ch',
    textDecoration: 'none',
    color: '$blue',

    '&:focus': {
      outline: 0,
    },
  },
});