

// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/Chat/Chat.story.tsx

import type { Meta, StoryObj } from '@storybook/react';

import type { SystemResponseProps } from '@/components/SystemResponse';
import SystemResponse from '@/components/SystemResponse';
import type { UserResponseProps } from '@/components/UserResponse';
import UserResponse from '@/components/UserResponse';
import { MOCK_IMAGE, VF_ICON } from '@/fixtures';

import Chat from '.';

const meta: Meta<typeof Chat> = {
  title: 'Templates/Chat',
  component: Chat,
  args: {
    isLoading: false,
    actions: [],
    title: 'Assistant Name',
    withWatermark: true,
    image: VF_ICON,
    description: "Voiceflow's virtual assistant is here to help.",
    startTime: Date.now(),
    hasEnded: false,
  },
};

export default meta;

type Story = StoryObj<typeof Chat>;

const SystemResponseTemplate = ({ messages, ...args }: Partial<SystemResponseProps>) => {
  return <SystemResponse {...args} messages={messages as any} avatar={VF_ICON} timestamp={Date.now()} />;
};

const UserResponseTemplate = ({ message, ...args }: Partial<UserResponseProps>) => (
  <UserResponse timestamp={Date.now()} message={message || 'Lorem ipsum dolor'} {...args} />
);

export const Empty: Story = {};

export const Exhaustive: Story = {
  render: (args) => {
    return (
      <Chat {...args}>
        <SystemResponseTemplate messages={[{ type: 'text', text: 'Lorem ipsum dolor' }]} />
        <SystemResponseTemplate messages={[{ type: 'image', url: MOCK_IMAGE }]} />
        <UserResponseTemplate />
        <SystemResponseTemplate
          messages={[
            {
              type: 'text',
              text: 'Lorem ipsum dolor lorem ipsum dolor lorem ipsum dolor consecteturaconsect turaconse lorem teturaconsecteturaconsecteturaconsectetura consectetura',
            },
          ]}
        />
        <UserResponseTemplate message="Lorem ipsum dolor lorem ipsum dolor lorem ipsum dolor consecteturaconsect turaconse lorem teturaconsecteturaconsecteturaconsectetura consecteturac onsecteturaconsecteturaconsecteturaco nsecteturaconsectetura" />
        <SystemResponseTemplate
          messages={[
            {
              type: 'card',
              title: 'Card Message',
              description:
                'Lorem ipsum dolor sit amet consectetur adipisicing elit. Exercitationem voluptas perspiciatis est quis dolores!',
              image: MOCK_IMAGE,
            },
          ]}
        />
      </Chat>
    );
  },
};


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/Chat/hooks.ts

import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import { useMemo } from 'react';

import type { Nullish } from '@/types';

dayjs.extend(relativeTime);

export const useTimestamp = (startTime?: Nullish<number>) => {
  return useMemo(() => {
    if (!startTime) return null;

    const start = dayjs(startTime);
    const now = dayjs();

    switch (true) {
      case now.isSame(start, 'day'):
        return 'Today';
      case now.subtract(1, 'day').isSame(start, 'day'):
        return 'Yesterday';
      default:
        return start.fromNow();
    }
  }, [startTime]);
};


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/Chat/index.tsx

import React, { memo, useContext, useMemo, useRef, useState } from 'react';

import type { AssistantInfoProps } from '@/components/AssistantInfo';
import AssistantInfo from '@/components/AssistantInfo';
import type { FooterProps } from '@/components/Footer';
import Footer from '@/components/Footer';
import type { HeaderActionProps, HeaderProps } from '@/components/Header';
import Header from '@/components/Header';
import Loader from '@/components/Loader';
import Prompt from '@/components/Prompt';
import { AutoScrollProvider, RuntimeStateAPIContext, RuntimeStateContext } from '@/contexts';
import { RenderMode } from '@/dtos/RenderOptions.dto';
import type { Nullish } from '@/types';
import { chain } from '@/utils/functional';

import { useTimestamp } from './hooks';
import { Container, Dialog, Overlay, SessionTime, Spacer, Status } from './styled';

export interface ChatProps extends HeaderProps, AssistantInfoProps, FooterProps, React.PropsWithChildren<unknown> {
  /**
   * A short description of the assistant to help frame the conversation.
   */
  description: string;

  /**
   * If true, shows a loading indicator.
   */
  isLoading: boolean;

  /**
   * If true, shows audio interface controls.
   */
  audioInterface?: boolean;

  /**
   * A unix timestamp indicating the start of the conversation.
   */
  startTime?: Nullish<number>;

  /**
   * If true, a Voiceflow watermark is added to the footer.
   */
  withWatermark: boolean;

  /**
   * A callback that is executed when the chat widget is minimized.
   */
  onMinimize?: React.MouseEventHandler<HTMLButtonElement>;

  /**
   * A callback that is executed when the conversation ends.
   */
  onEnd?: React.MouseEventHandler<HTMLButtonElement>;
}

const Chat: React.FC<ChatProps> = ({
  hasEnded = false,
  title,
  image,
  avatar,
  description,
  startTime,
  isLoading,
  withWatermark,
  onMinimize,
  onEnd,
  onStart,
  onSend,
  children,
  audioInterface,
}) => {
  const timestamp = useTimestamp(startTime);
  const dialogRef = useRef<HTMLElement>(null);
  const [hasAlert, setAlert] = useState(false);

  const { config, toggleAudioOutput } = useContext(RuntimeStateAPIContext);
  const state = useContext(RuntimeStateContext);

  const handleClose = (event: React.MouseEvent<HTMLButtonElement>): void => {
    if (hasEnded) {
      onEnd?.(event);
    } else {
      setAlert(true);
    }
  };

  const handleResume = (): void => setAlert(false);

  const actions = useMemo<HeaderActionProps[]>(() => {
    const items: HeaderActionProps[] = [{ svg: 'close', onClick: handleClose }];

    if (config.render?.mode === RenderMode.OVERLAY) {
      items.unshift({ svg: 'minus', onClick: onMinimize });
    }

    if (audioInterface) {
      items.unshift({
        svg: state.audioOutput ? 'sound' : 'soundOff',
        onClick: toggleAudioOutput,
      });
    }

    return items;
  }, [config.render, handleClose, onMinimize, state.audioOutput, audioInterface]);

  if (isLoading) {
    return (
      <Container>
        <Loader />
      </Container>
    );
  }

  return (
    <Container withPrompt={hasAlert}>
      <Header title={title} image={image} actions={actions} />
      <Dialog ref={dialogRef}>
        <AutoScrollProvider target={dialogRef}>
          <AssistantInfo title={title} avatar={avatar} description={description} />
          <Spacer />
          {!!timestamp && !!state.session.turns.length && <SessionTime>{timestamp}</SessionTime>}
          {children}
          {hasEnded && !!state.session.turns.length && <Status>The chat has ended</Status>}
        </AutoScrollProvider>
      </Dialog>
      <Footer
        withWatermark={withWatermark}
        hasEnded={hasEnded}
        onStart={onStart}
        onSend={onSend}
        disableSend={state.indicator}
        audioInterface={audioInterface}
        speechRecognition={config.speechRecognition}
      />
      <Overlay />
      <Prompt
        accept={{ label: 'End Chat', type: 'warn', onClick: chain(onEnd, handleResume) }}
        cancel={{ label: 'Cancel', onClick: handleResume }}
      />
    </Container>
  );
};

/**
 * A full chat dialog with header, footer, overlay and auto-scrolling content.
 *
 * @see {@link https://voiceflow.github.io/react-chat/?path=/story/templates-chat--empty}
 */
export default Object.assign(memo(Chat), {
  Container,
  Dialog,
  Overlay,
  Spacer,
  Status,
});


// File: /Users/yannickromainsegaar/react-chat/packages/react-chat/src/components/Chat/styled.ts

import AssistantInfo from '@/components/AssistantInfo';
import { Container as FooterContainer } from '@/components/Footer/styled';
import Header from '@/components/Header';
import Loader from '@/components/Loader';
import Prompt from '@/components/Prompt';
import SystemResponse from '@/components/SystemResponse';
import Timestamp from '@/components/Timestamp';
import UserResponse from '@/components/UserResponse';
import { ClassName } from '@/constants';
import { tagFactory } from '@/hocs';
import type { CSS } from '@/styles';
import { animationStyles, createTransition, fadeIn, styled } from '@/styles';

const PROMPT_OVERFLOW = 10;

const tag = tagFactory(ClassName.CHAT);

export const Overlay = styled(tag('div', 'overlay'), {
  position: 'absolute',
  top: 0,
  bottom: 0,
  left: 0,
  right: 0,
  backgroundColor: '$shadow12',
});

export const Container = styled(tag('article'), {
  position: 'relative',
  display: 'flex',
  overflow: 'hidden',
  flexDirection: 'column',
  backgroundColor: '$white',

  [`& > ${Loader}`]: {
    margin: 'auto',
  },

  [`& ${Header.Container}`]: {
    animation: `${fadeIn} 150ms ease forwards`,
  },

  [`& ${FooterContainer}`]: { // Update here
    ...animationStyles({ duration: 300, delay: 300 }),
  },

  [`& ${Overlay}`]: {
    opacity: 0,
    pointerEvents: 'none',
    trans: ['opacity'],
  },

  [`& ${Prompt.Container}`]: {
    position: 'absolute',
    bottom: 0,
    width: '100%',
    boxSizing: 'border-box',
    paddingBottom: `calc($3 + ${PROMPT_OVERFLOW}px)`,
    transition: `transform 320ms cubic-bezier(0.45, 1.29, 0.64, 1), ${createTransition(['box-shadow'], 300)}`,
    transform: `translateY(calc(100% + ${PROMPT_OVERFLOW}px))`,
  },

  variants: {
    withPrompt: {
      true: {
        [`& ${Overlay}`]: {
          opacity: 1,
          zIndex: 2,
          pointerEvents: 'auto',
        },

        [`& ${Prompt.Container}`]: {
          zIndex: 3,
          transform: `translateY(${PROMPT_OVERFLOW}px)`,
        },
      },
      false: {
        [`& ${Prompt.Container}`]: {
          boxShadow: 'none',
        },
      },
    },
  },
});

const statusStyles: CSS = {
  display: 'flex',
  justifyContent: 'center',
  typo: { size: 12 },
  color: '$darkGrey',
};

export const Status = styled(tag('div', 'status'), {
  ...statusStyles,
});

export const SessionTime = styled(tag('span', 'session-time'), {
  ...statusStyles,
  paddingBottom: '$3',
});

export const Dialog = styled(tag('main', 'dialog'), {
  display: 'flex',
  flexDirection: 'column',
  height: '100%',
  overflowY: 'scroll',
  overflowX: 'hidden',
  paddingBottom: '$3',

  [`
    & ${UserResponse.Container},
    & ${SystemResponse.List},
    & ${SystemResponse.Actions},
    & ${AssistantInfo.Container}
  `]: {
    ...animationStyles({ duration: 150, delay: 0 }),
  },

  [`
    & > ${UserResponse.Container},
    & > ${SystemResponse.Container}
  `]: {
    padding: '0 $5',
  },

  [`& > ${SystemResponse.Actions}`]: {
    padding: '0 $5 0 54px',
  },

  [`& ${SystemResponse.Container}`]: {
    marginBottom: '$1',

    '&:last-of-type': {
      marginBottom: 0,
    },
  },

  [`& ${UserResponse.Container} + ${UserResponse.Container}`]: {
    marginTop: '$1',
  },

  [`
    & ${SystemResponse.Container} + ${UserResponse.Container},
    & ${SystemResponse.Actions} + ${UserResponse.Container},
    & ${UserResponse.Container} + ${SystemResponse.Controls} + ${SystemResponse.Container}
  `]: {
    marginTop: '$5',
  },

  [`& ${Timestamp.Container}`]: { width: 50 },

  [`& ${Status}`]: {
    marginTop: '$3',
    marginBottom: 8,
  },
});

export const Spacer = styled(tag('div', 'spacer'), {
  flexGrow: 1,
});